{"ast":null,"code":"/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n * @returns {Buffer} Buffer instance from Data URI\n * @api public\n */\nexport function dataUriToBuffer(uri) {\n  if (!/^data:/i.test(uri)) {\n    throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n  }\n  // strip newlines\n  uri = uri.replace(/\\r?\\n/g, '');\n  // split the URI up into the \"metadata\" and the \"data\" portions\n  const firstComma = uri.indexOf(',');\n  if (firstComma === -1 || firstComma <= 4) {\n    throw new TypeError('malformed data: URI');\n  }\n  // remove the \"data:\" scheme and parse the metadata\n  const meta = uri.substring(5, firstComma).split(';');\n  let charset = '';\n  let base64 = false;\n  const type = meta[0] || 'text/plain';\n  let typeFull = type;\n  for (let i = 1; i < meta.length; i++) {\n    if (meta[i] === 'base64') {\n      base64 = true;\n    } else if (meta[i]) {\n      typeFull += `;${meta[i]}`;\n      if (meta[i].indexOf('charset=') === 0) {\n        charset = meta[i].substring(8);\n      }\n    }\n  }\n  // defaults to US-ASCII only if type is not provided\n  if (!meta[0] && !charset.length) {\n    typeFull += ';charset=US-ASCII';\n    charset = 'US-ASCII';\n  }\n  // get the encoded data portion and decode URI-encoded chars\n  const encoding = base64 ? 'base64' : 'ascii';\n  const data = unescape(uri.substring(firstComma + 1));\n  const buffer = Buffer.from(data, encoding);\n  // set `.type` and `.typeFull` properties to MIME type\n  buffer.type = type;\n  buffer.typeFull = typeFull;\n  // set the `.charset` property\n  buffer.charset = charset;\n  return buffer;\n}\nexport default dataUriToBuffer;","map":{"version":3,"names":["dataUriToBuffer","uri","test","TypeError","replace","firstComma","indexOf","meta","substring","split","charset","base64","type","typeFull","i","length","encoding","data","unescape","buffer","Buffer","from"],"sources":["C:/Users/Antonio Mallen Gimen/Documents/Proyecto/FrontAntonioMallen/node_modules/data-uri-to-buffer/dist/index.js"],"sourcesContent":["/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n * @returns {Buffer} Buffer instance from Data URI\n * @api public\n */\nexport function dataUriToBuffer(uri) {\n    if (!/^data:/i.test(uri)) {\n        throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n    }\n    // strip newlines\n    uri = uri.replace(/\\r?\\n/g, '');\n    // split the URI up into the \"metadata\" and the \"data\" portions\n    const firstComma = uri.indexOf(',');\n    if (firstComma === -1 || firstComma <= 4) {\n        throw new TypeError('malformed data: URI');\n    }\n    // remove the \"data:\" scheme and parse the metadata\n    const meta = uri.substring(5, firstComma).split(';');\n    let charset = '';\n    let base64 = false;\n    const type = meta[0] || 'text/plain';\n    let typeFull = type;\n    for (let i = 1; i < meta.length; i++) {\n        if (meta[i] === 'base64') {\n            base64 = true;\n        }\n        else if (meta[i]) {\n            typeFull += `;${meta[i]}`;\n            if (meta[i].indexOf('charset=') === 0) {\n                charset = meta[i].substring(8);\n            }\n        }\n    }\n    // defaults to US-ASCII only if type is not provided\n    if (!meta[0] && !charset.length) {\n        typeFull += ';charset=US-ASCII';\n        charset = 'US-ASCII';\n    }\n    // get the encoded data portion and decode URI-encoded chars\n    const encoding = base64 ? 'base64' : 'ascii';\n    const data = unescape(uri.substring(firstComma + 1));\n    const buffer = Buffer.from(data, encoding);\n    // set `.type` and `.typeFull` properties to MIME type\n    buffer.type = type;\n    buffer.typeFull = typeFull;\n    // set the `.charset` property\n    buffer.charset = charset;\n    return buffer;\n}\nexport default dataUriToBuffer;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,eAAe,CAACC,GAAG,EAAE;EACjC,IAAI,CAAC,SAAS,CAACC,IAAI,CAACD,GAAG,CAAC,EAAE;IACtB,MAAM,IAAIE,SAAS,CAAC,kEAAkE,CAAC;EAC3F;EACA;EACAF,GAAG,GAAGA,GAAG,CAACG,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;EAC/B;EACA,MAAMC,UAAU,GAAGJ,GAAG,CAACK,OAAO,CAAC,GAAG,CAAC;EACnC,IAAID,UAAU,KAAK,CAAC,CAAC,IAAIA,UAAU,IAAI,CAAC,EAAE;IACtC,MAAM,IAAIF,SAAS,CAAC,qBAAqB,CAAC;EAC9C;EACA;EACA,MAAMI,IAAI,GAAGN,GAAG,CAACO,SAAS,CAAC,CAAC,EAAEH,UAAU,CAAC,CAACI,KAAK,CAAC,GAAG,CAAC;EACpD,IAAIC,OAAO,GAAG,EAAE;EAChB,IAAIC,MAAM,GAAG,KAAK;EAClB,MAAMC,IAAI,GAAGL,IAAI,CAAC,CAAC,CAAC,IAAI,YAAY;EACpC,IAAIM,QAAQ,GAAGD,IAAI;EACnB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,IAAI,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;IAClC,IAAIP,IAAI,CAACO,CAAC,CAAC,KAAK,QAAQ,EAAE;MACtBH,MAAM,GAAG,IAAI;IACjB,CAAC,MACI,IAAIJ,IAAI,CAACO,CAAC,CAAC,EAAE;MACdD,QAAQ,IAAK,IAAGN,IAAI,CAACO,CAAC,CAAE,EAAC;MACzB,IAAIP,IAAI,CAACO,CAAC,CAAC,CAACR,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;QACnCI,OAAO,GAAGH,IAAI,CAACO,CAAC,CAAC,CAACN,SAAS,CAAC,CAAC,CAAC;MAClC;IACJ;EACJ;EACA;EACA,IAAI,CAACD,IAAI,CAAC,CAAC,CAAC,IAAI,CAACG,OAAO,CAACK,MAAM,EAAE;IAC7BF,QAAQ,IAAI,mBAAmB;IAC/BH,OAAO,GAAG,UAAU;EACxB;EACA;EACA,MAAMM,QAAQ,GAAGL,MAAM,GAAG,QAAQ,GAAG,OAAO;EAC5C,MAAMM,IAAI,GAAGC,QAAQ,CAACjB,GAAG,CAACO,SAAS,CAACH,UAAU,GAAG,CAAC,CAAC,CAAC;EACpD,MAAMc,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACJ,IAAI,EAAED,QAAQ,CAAC;EAC1C;EACAG,MAAM,CAACP,IAAI,GAAGA,IAAI;EAClBO,MAAM,CAACN,QAAQ,GAAGA,QAAQ;EAC1B;EACAM,MAAM,CAACT,OAAO,GAAGA,OAAO;EACxB,OAAOS,MAAM;AACjB;AACA,eAAenB,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}